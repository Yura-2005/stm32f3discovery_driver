
stm32f3xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b78  08000b78  00001b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b84  08000b84  00001b94  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000b84  08000b84  00001b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b8c  08000b94  00001b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b8c  08000b8c  00001b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b90  08000b90  00001b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001b94  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f57  00000000  00000000  00001bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003c5  00000000  00000000  00002b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00002ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d2  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000026f5  00000000  00000000  000030da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017ab  00000000  00000000  000057cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000917b  00000000  00000000  00006f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000100f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003dc  00000000  00000000  00010138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00010514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000b60 	.word	0x08000b60

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000b60 	.word	0x08000b60

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <SPI_GPIOIints>:
//PB14 --> SPI2_MISO
//PB13 --> SPI2_SCK
//PB12 --> SPI2_NSS
//ALT func. mode : 5

void SPI_GPIOIints(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001ea:	4b11      	ldr	r3, [pc, #68]	@ (8000230 <SPI_GPIOIints+0x4c>)
 80001ec:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001ee:	2302      	movs	r3, #2
 80001f0:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5 ;
 80001f2:	2305      	movs	r3, #5
 80001f4:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001f6:	2300      	movs	r3, #0
 80001f8:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80001fa:	2301      	movs	r3, #1
 80001fc:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000202:	230d      	movs	r3, #13
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f96d 	bl	80004e8 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800020e:	230f      	movs	r3, #15
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f967 	bl	80004e8 <GPIO_Init>

//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
//	GPIO_Init(&SPIPins);
//
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800021a:	230c      	movs	r3, #12
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f961 	bl	80004e8 <GPIO_Init>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	48000400 	.word	0x48000400

08000234 <SPI2_Inits>:

void SPI2_Inits(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 800023a:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <SPI2_Inits+0x38>)
 800023c:	607b      	str	r3, [r7, #4]

	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800023e:	2301      	movs	r3, #1
 8000240:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000242:	2301      	movs	r3, #1
 8000244:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000246:	2300      	movs	r3, #0
 8000248:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI;
 8000252:	2300      	movs	r3, #0
 8000254:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 8000256:	2302      	movs	r3, #2
 8000258:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fb9d 	bl	800099c <SPI_Init>
}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40003800 	.word	0x40003800

08000270 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	  GPIO_Handle_t USER_BUTTON;
	  USER_BUTTON.pGPIOx = GPIOA;
 8000276:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800027a:	607b      	str	r3, [r7, #4]
	  USER_BUTTON.GPIO_PinConfig.GPIO_PinNumber       = GPIO_PIN_NO_0;
 800027c:	2300      	movs	r3, #0
 800027e:	723b      	strb	r3, [r7, #8]
	  USER_BUTTON.GPIO_PinConfig.GPIO_PinMode         = GPIO_MODE_IT_FT;
 8000280:	2304      	movs	r3, #4
 8000282:	727b      	strb	r3, [r7, #9]
	  USER_BUTTON.GPIO_PinConfig.GPIO_PinSpeed        = GPIO_SPEED_LOW;
 8000284:	2300      	movs	r3, #0
 8000286:	72bb      	strb	r3, [r7, #10]
	  USER_BUTTON.GPIO_PinConfig.GPIO_PinPuPdControl  = GPIO_PIN_PU;
 8000288:	2301      	movs	r3, #1
 800028a:	72fb      	strb	r3, [r7, #11]
	  GPIO_Init(&USER_BUTTON);
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f92a 	bl	80004e8 <GPIO_Init>
}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <delay>:

void delay() {
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
  for(volatile int i = 0; i < 500000/2; i++);
 80002a2:	2300      	movs	r3, #0
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	e002      	b.n	80002ae <delay+0x12>
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3301      	adds	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a04      	ldr	r2, [pc, #16]	@ (80002c4 <delay+0x28>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	ddf8      	ble.n	80002a8 <delay+0xc>
}
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	0003d08f 	.word	0x0003d08f

080002c8 <main>:

int main(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
	char user_data[] = "Hello World";
 80002ce:	4a20      	ldr	r2, [pc, #128]	@ (8000350 <main+0x88>)
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	GPIO_ButtonInit();
 80002d8:	f7ff ffca 	bl	8000270 <GPIO_ButtonInit>

	SPI_GPIOIints();
 80002dc:	f7ff ff82 	bl	80001e4 <SPI_GPIOIints>
	SPI2_Inits();
 80002e0:	f7ff ffa8 	bl	8000234 <SPI2_Inits>
	SPI_SSOEConfig(SPI2, ENABLE);
 80002e4:	2101      	movs	r1, #1
 80002e6:	481b      	ldr	r0, [pc, #108]	@ (8000354 <main+0x8c>)
 80002e8:	f000 fbfa 	bl	8000ae0 <SPI_SSOEConfig>
	while(1){
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80002ec:	bf00      	nop
 80002ee:	2100      	movs	r1, #0
 80002f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f4:	f000 fae6 	bl	80008c4 <GPIO_ReadFromInputPin>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f7      	beq.n	80002ee <main+0x26>
		delay();
 80002fe:	f7ff ffcd 	bl	800029c <delay>
		SPI_PeripheralControl(SPI2, ENABLE);
 8000302:	2101      	movs	r1, #1
 8000304:	4813      	ldr	r0, [pc, #76]	@ (8000354 <main+0x8c>)
 8000306:	f000 fbd0 	bl	8000aaa <SPI_PeripheralControl>
		uint8_t datalen = strlen(user_data);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff61 	bl	80001d4 <strlen>
 8000312:	4603      	mov	r3, r0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2, &datalen, 1);
 8000318:	1cfb      	adds	r3, r7, #3
 800031a:	2201      	movs	r2, #1
 800031c:	4619      	mov	r1, r3
 800031e:	480d      	ldr	r0, [pc, #52]	@ (8000354 <main+0x8c>)
 8000320:	f000 fb8c 	bl	8000a3c <SPI_SendData>
		SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff54 	bl	80001d4 <strlen>
 800032c:	4602      	mov	r2, r0
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4619      	mov	r1, r3
 8000332:	4808      	ldr	r0, [pc, #32]	@ (8000354 <main+0x8c>)
 8000334:	f000 fb82 	bl	8000a3c <SPI_SendData>
		while((SPI2->SR & (1 << SPI_SR_BSY)));
 8000338:	bf00      	nop
 800033a:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <main+0x8c>)
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000342:	2b00      	cmp	r3, #0
 8000344:	d1f9      	bne.n	800033a <main+0x72>
		SPI_PeripheralControl(SPI2, DISABLE);
 8000346:	2100      	movs	r1, #0
 8000348:	4802      	ldr	r0, [pc, #8]	@ (8000354 <main+0x8c>)
 800034a:	f000 fbae 	bl	8000aaa <SPI_PeripheralControl>
	while(1){
 800034e:	e7cd      	b.n	80002ec <main+0x24>
 8000350:	08000b78 	.word	0x08000b78
 8000354:	40003800 	.word	0x40003800

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800035c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480c      	ldr	r0, [pc, #48]	@ (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490d      	ldr	r1, [pc, #52]	@ (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0d      	ldr	r2, [pc, #52]	@ (800039c <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0a      	ldr	r2, [pc, #40]	@ (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0a      	ldr	r4, [pc, #40]	@ (80003a4 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 fbc7 	bl	8000b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ff9d 	bl	80002c8 <main>

0800038e <LoopForever>:

LoopForever:
  b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800039c:	08000b94 	.word	0x08000b94
  ldr r2, =_sbss
 80003a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a4:	2000001c 	.word	0x2000001c

080003a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC1_2_IRQHandler>
	...

080003ac <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 80003b8:	78fb      	ldrb	r3, [r7, #3]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d141      	bne.n	8000442 <GPIO_PeriClockControl+0x96>
    {
        if (pGPIOx == GPIOA)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClockControl+0x28>
            GPIOA_PCLK_EN();
 80003c6:	4b42      	ldr	r3, [pc, #264]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a41      	ldr	r2, [pc, #260]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 80003cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003d0:	6153      	str	r3, [r2, #20]
        else if (pGPIOx == GPIOF)
            GPIOF_PCLK_DI();
        else if (pGPIOx == GPIOE)
            GPIOE_PCLK_DI();
    }
}
 80003d2:	e077      	b.n	80004c4 <GPIO_PeriClockControl+0x118>
        else if (pGPIOx == GPIOB)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a3f      	ldr	r2, [pc, #252]	@ (80004d4 <GPIO_PeriClockControl+0x128>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 80003dc:	4b3c      	ldr	r3, [pc, #240]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a3b      	ldr	r2, [pc, #236]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 80003e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003e6:	6153      	str	r3, [r2, #20]
}
 80003e8:	e06c      	b.n	80004c4 <GPIO_PeriClockControl+0x118>
        else if (pGPIOx == GPIOC)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a3a      	ldr	r2, [pc, #232]	@ (80004d8 <GPIO_PeriClockControl+0x12c>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 80003f2:	4b37      	ldr	r3, [pc, #220]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a36      	ldr	r2, [pc, #216]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 80003f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003fc:	6153      	str	r3, [r2, #20]
}
 80003fe:	e061      	b.n	80004c4 <GPIO_PeriClockControl+0x118>
        else if (pGPIOx == GPIOD)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a36      	ldr	r2, [pc, #216]	@ (80004dc <GPIO_PeriClockControl+0x130>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 8000408:	4b31      	ldr	r3, [pc, #196]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	4a30      	ldr	r2, [pc, #192]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 800040e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000412:	6153      	str	r3, [r2, #20]
}
 8000414:	e056      	b.n	80004c4 <GPIO_PeriClockControl+0x118>
        else if (pGPIOx == GPIOF)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a31      	ldr	r2, [pc, #196]	@ (80004e0 <GPIO_PeriClockControl+0x134>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PeriClockControl+0x80>
            GPIOF_PCLK_EN();
 800041e:	4b2c      	ldr	r3, [pc, #176]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a2b      	ldr	r2, [pc, #172]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 8000424:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000428:	6153      	str	r3, [r2, #20]
}
 800042a:	e04b      	b.n	80004c4 <GPIO_PeriClockControl+0x118>
        else if (pGPIOx == GPIOE)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a2d      	ldr	r2, [pc, #180]	@ (80004e4 <GPIO_PeriClockControl+0x138>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d147      	bne.n	80004c4 <GPIO_PeriClockControl+0x118>
            GPIOE_PCLK_EN();
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	4a25      	ldr	r2, [pc, #148]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 800043a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800043e:	6153      	str	r3, [r2, #20]
}
 8000440:	e040      	b.n	80004c4 <GPIO_PeriClockControl+0x118>
        if (pGPIOx == GPIOA)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0xac>
            GPIOA_PCLK_DI();
 800044a:	4b21      	ldr	r3, [pc, #132]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a20      	ldr	r2, [pc, #128]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 8000450:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000454:	6153      	str	r3, [r2, #20]
}
 8000456:	e035      	b.n	80004c4 <GPIO_PeriClockControl+0x118>
        else if (pGPIOx == GPIOB)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a1e      	ldr	r2, [pc, #120]	@ (80004d4 <GPIO_PeriClockControl+0x128>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0xc2>
            GPIOB_PCLK_DI();
 8000460:	4b1b      	ldr	r3, [pc, #108]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	4a1a      	ldr	r2, [pc, #104]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 8000466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800046a:	6153      	str	r3, [r2, #20]
}
 800046c:	e02a      	b.n	80004c4 <GPIO_PeriClockControl+0x118>
        else if (pGPIOx == GPIOC)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a19      	ldr	r2, [pc, #100]	@ (80004d8 <GPIO_PeriClockControl+0x12c>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0xd8>
            GPIOC_PCLK_DI();
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a15      	ldr	r2, [pc, #84]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 800047c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000480:	6153      	str	r3, [r2, #20]
}
 8000482:	e01f      	b.n	80004c4 <GPIO_PeriClockControl+0x118>
        else if (pGPIOx == GPIOD)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a15      	ldr	r2, [pc, #84]	@ (80004dc <GPIO_PeriClockControl+0x130>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0xee>
            GPIOD_PCLK_DI();
 800048c:	4b10      	ldr	r3, [pc, #64]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	4a0f      	ldr	r2, [pc, #60]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 8000492:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000496:	6153      	str	r3, [r2, #20]
}
 8000498:	e014      	b.n	80004c4 <GPIO_PeriClockControl+0x118>
        else if (pGPIOx == GPIOF)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a10      	ldr	r2, [pc, #64]	@ (80004e0 <GPIO_PeriClockControl+0x134>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0x104>
            GPIOF_PCLK_DI();
 80004a2:	4b0b      	ldr	r3, [pc, #44]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a0a      	ldr	r2, [pc, #40]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 80004a8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80004ac:	6153      	str	r3, [r2, #20]
}
 80004ae:	e009      	b.n	80004c4 <GPIO_PeriClockControl+0x118>
        else if (pGPIOx == GPIOE)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a0c      	ldr	r2, [pc, #48]	@ (80004e4 <GPIO_PeriClockControl+0x138>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d105      	bne.n	80004c4 <GPIO_PeriClockControl+0x118>
            GPIOE_PCLK_DI();
 80004b8:	4b05      	ldr	r3, [pc, #20]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a04      	ldr	r2, [pc, #16]	@ (80004d0 <GPIO_PeriClockControl+0x124>)
 80004be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80004c2:	6153      	str	r3, [r2, #20]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	48000400 	.word	0x48000400
 80004d8:	48000800 	.word	0x48000800
 80004dc:	48000c00 	.word	0x48000c00
 80004e0:	48001400 	.word	0x48001400
 80004e4:	48001000 	.word	0x48001000

080004e8 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]

    GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2101      	movs	r1, #1
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff56 	bl	80003ac <GPIO_PeriClockControl>

    uint8_t pinno = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	791b      	ldrb	r3, [r3, #4]
 8000504:	72fb      	strb	r3, [r7, #11]

    if (pinno > 15) return; // недопустимий пін
 8000506:	7afb      	ldrb	r3, [r7, #11]
 8000508:	2b0f      	cmp	r3, #15
 800050a:	f200 81d5 	bhi.w	80008b8 <GPIO_Init+0x3d0>

    // 1. Configure the mode
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	795b      	ldrb	r3, [r3, #5]
 8000512:	2b03      	cmp	r3, #3
 8000514:	d81e      	bhi.n	8000554 <GPIO_Init+0x6c>
    {
        // Non-interrupt mode
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pinno));
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	461a      	mov	r2, r3
 800051c:	7afb      	ldrb	r3, [r7, #11]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pinno)); // clear
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	7afb      	ldrb	r3, [r7, #11]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	2103      	movs	r1, #3
 8000532:	fa01 f303 	lsl.w	r3, r1, r3
 8000536:	43db      	mvns	r3, r3
 8000538:	4619      	mov	r1, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	400a      	ands	r2, r1
 8000540:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp; // set
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6819      	ldr	r1, [r3, #0]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	430a      	orrs	r2, r1
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	e124      	b.n	800079e <GPIO_Init+0x2b6>
    }
    else
    {
        // Interrupt mode
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800055c:	d024      	beq.n	80005a8 <GPIO_Init+0xc0>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a81      	ldr	r2, [pc, #516]	@ (8000768 <GPIO_Init+0x280>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d01d      	beq.n	80005a4 <GPIO_Init+0xbc>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a7f      	ldr	r2, [pc, #508]	@ (800076c <GPIO_Init+0x284>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d016      	beq.n	80005a0 <GPIO_Init+0xb8>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a7e      	ldr	r2, [pc, #504]	@ (8000770 <GPIO_Init+0x288>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d00f      	beq.n	800059c <GPIO_Init+0xb4>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a7c      	ldr	r2, [pc, #496]	@ (8000774 <GPIO_Init+0x28c>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d008      	beq.n	8000598 <GPIO_Init+0xb0>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a7b      	ldr	r2, [pc, #492]	@ (8000778 <GPIO_Init+0x290>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d101      	bne.n	8000594 <GPIO_Init+0xac>
 8000590:	2305      	movs	r3, #5
 8000592:	e00a      	b.n	80005aa <GPIO_Init+0xc2>
 8000594:	2300      	movs	r3, #0
 8000596:	e008      	b.n	80005aa <GPIO_Init+0xc2>
 8000598:	2304      	movs	r3, #4
 800059a:	e006      	b.n	80005aa <GPIO_Init+0xc2>
 800059c:	2303      	movs	r3, #3
 800059e:	e004      	b.n	80005aa <GPIO_Init+0xc2>
 80005a0:	2302      	movs	r3, #2
 80005a2:	e002      	b.n	80005aa <GPIO_Init+0xc2>
 80005a4:	2301      	movs	r3, #1
 80005a6:	e000      	b.n	80005aa <GPIO_Init+0xc2>
 80005a8:	2300      	movs	r3, #0
 80005aa:	72bb      	strb	r3, [r7, #10]

        // 1. Enable SYSCFG clock
        SYSCFG_PCLK_EN();
 80005ac:	4b73      	ldr	r3, [pc, #460]	@ (800077c <GPIO_Init+0x294>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a72      	ldr	r2, [pc, #456]	@ (800077c <GPIO_Init+0x294>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6193      	str	r3, [r2, #24]

        // 2. Configure SYSCFG_EXTICR
        SYSCFG->EXTICR[pinno / 4] &= ~(0xF << (4 * (pinno % 4)));
 80005b8:	4a71      	ldr	r2, [pc, #452]	@ (8000780 <GPIO_Init+0x298>)
 80005ba:	7afb      	ldrb	r3, [r7, #11]
 80005bc:	089b      	lsrs	r3, r3, #2
 80005be:	b2d8      	uxtb	r0, r3
 80005c0:	4603      	mov	r3, r0
 80005c2:	3302      	adds	r3, #2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	7afa      	ldrb	r2, [r7, #11]
 80005cc:	f002 0203 	and.w	r2, r2, #3
 80005d0:	0092      	lsls	r2, r2, #2
 80005d2:	210f      	movs	r1, #15
 80005d4:	fa01 f202 	lsl.w	r2, r1, r2
 80005d8:	43d2      	mvns	r2, r2
 80005da:	4969      	ldr	r1, [pc, #420]	@ (8000780 <GPIO_Init+0x298>)
 80005dc:	401a      	ands	r2, r3
 80005de:	1c83      	adds	r3, r0, #2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	440b      	add	r3, r1
 80005e4:	605a      	str	r2, [r3, #4]
        SYSCFG->EXTICR[pinno / 4] |= (portcode << (4 * (pinno % 4)));
 80005e6:	4a66      	ldr	r2, [pc, #408]	@ (8000780 <GPIO_Init+0x298>)
 80005e8:	7afb      	ldrb	r3, [r7, #11]
 80005ea:	089b      	lsrs	r3, r3, #2
 80005ec:	b2d8      	uxtb	r0, r3
 80005ee:	4603      	mov	r3, r0
 80005f0:	3302      	adds	r3, #2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	7ab9      	ldrb	r1, [r7, #10]
 80005fa:	7afa      	ldrb	r2, [r7, #11]
 80005fc:	f002 0203 	and.w	r2, r2, #3
 8000600:	0092      	lsls	r2, r2, #2
 8000602:	fa01 f202 	lsl.w	r2, r1, r2
 8000606:	495e      	ldr	r1, [pc, #376]	@ (8000780 <GPIO_Init+0x298>)
 8000608:	431a      	orrs	r2, r3
 800060a:	1c83      	adds	r3, r0, #2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	605a      	str	r2, [r3, #4]

        // 3. Configure trigger
        if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	795b      	ldrb	r3, [r3, #5]
 8000616:	2b04      	cmp	r3, #4
 8000618:	d130      	bne.n	800067c <GPIO_Init+0x194>
        {
            if (pinno < 32) {
 800061a:	7afb      	ldrb	r3, [r7, #11]
 800061c:	2b1f      	cmp	r3, #31
 800061e:	d815      	bhi.n	800064c <GPIO_Init+0x164>
                EXTI->FTSR1 |= (1 << pinno);
 8000620:	4b58      	ldr	r3, [pc, #352]	@ (8000784 <GPIO_Init+0x29c>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	7afa      	ldrb	r2, [r7, #11]
 8000626:	2101      	movs	r1, #1
 8000628:	fa01 f202 	lsl.w	r2, r1, r2
 800062c:	4611      	mov	r1, r2
 800062e:	4a55      	ldr	r2, [pc, #340]	@ (8000784 <GPIO_Init+0x29c>)
 8000630:	430b      	orrs	r3, r1
 8000632:	60d3      	str	r3, [r2, #12]
                EXTI->RTSR1 &= ~(1 << pinno);
 8000634:	4b53      	ldr	r3, [pc, #332]	@ (8000784 <GPIO_Init+0x29c>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	7afa      	ldrb	r2, [r7, #11]
 800063a:	2101      	movs	r1, #1
 800063c:	fa01 f202 	lsl.w	r2, r1, r2
 8000640:	43d2      	mvns	r2, r2
 8000642:	4611      	mov	r1, r2
 8000644:	4a4f      	ldr	r2, [pc, #316]	@ (8000784 <GPIO_Init+0x29c>)
 8000646:	400b      	ands	r3, r1
 8000648:	6093      	str	r3, [r2, #8]
 800064a:	e07e      	b.n	800074a <GPIO_Init+0x262>
            } else {
                EXTI->FTSR2 |= (1 << (pinno - 32));
 800064c:	4b4d      	ldr	r3, [pc, #308]	@ (8000784 <GPIO_Init+0x29c>)
 800064e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000650:	7afa      	ldrb	r2, [r7, #11]
 8000652:	3a20      	subs	r2, #32
 8000654:	2101      	movs	r1, #1
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	4611      	mov	r1, r2
 800065c:	4a49      	ldr	r2, [pc, #292]	@ (8000784 <GPIO_Init+0x29c>)
 800065e:	430b      	orrs	r3, r1
 8000660:	6253      	str	r3, [r2, #36]	@ 0x24
                EXTI->RTSR2 &= ~(1 << (pinno - 32));
 8000662:	4b48      	ldr	r3, [pc, #288]	@ (8000784 <GPIO_Init+0x29c>)
 8000664:	6a1b      	ldr	r3, [r3, #32]
 8000666:	7afa      	ldrb	r2, [r7, #11]
 8000668:	3a20      	subs	r2, #32
 800066a:	2101      	movs	r1, #1
 800066c:	fa01 f202 	lsl.w	r2, r1, r2
 8000670:	43d2      	mvns	r2, r2
 8000672:	4611      	mov	r1, r2
 8000674:	4a43      	ldr	r2, [pc, #268]	@ (8000784 <GPIO_Init+0x29c>)
 8000676:	400b      	ands	r3, r1
 8000678:	6213      	str	r3, [r2, #32]
 800067a:	e066      	b.n	800074a <GPIO_Init+0x262>
            }
        }
        else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	2b05      	cmp	r3, #5
 8000682:	d130      	bne.n	80006e6 <GPIO_Init+0x1fe>
        {
            if (pinno < 32) {
 8000684:	7afb      	ldrb	r3, [r7, #11]
 8000686:	2b1f      	cmp	r3, #31
 8000688:	d815      	bhi.n	80006b6 <GPIO_Init+0x1ce>
                EXTI->RTSR1 |= (1 << pinno);
 800068a:	4b3e      	ldr	r3, [pc, #248]	@ (8000784 <GPIO_Init+0x29c>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	7afa      	ldrb	r2, [r7, #11]
 8000690:	2101      	movs	r1, #1
 8000692:	fa01 f202 	lsl.w	r2, r1, r2
 8000696:	4611      	mov	r1, r2
 8000698:	4a3a      	ldr	r2, [pc, #232]	@ (8000784 <GPIO_Init+0x29c>)
 800069a:	430b      	orrs	r3, r1
 800069c:	6093      	str	r3, [r2, #8]
                EXTI->FTSR1 &= ~(1 << pinno);
 800069e:	4b39      	ldr	r3, [pc, #228]	@ (8000784 <GPIO_Init+0x29c>)
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	7afa      	ldrb	r2, [r7, #11]
 80006a4:	2101      	movs	r1, #1
 80006a6:	fa01 f202 	lsl.w	r2, r1, r2
 80006aa:	43d2      	mvns	r2, r2
 80006ac:	4611      	mov	r1, r2
 80006ae:	4a35      	ldr	r2, [pc, #212]	@ (8000784 <GPIO_Init+0x29c>)
 80006b0:	400b      	ands	r3, r1
 80006b2:	60d3      	str	r3, [r2, #12]
 80006b4:	e049      	b.n	800074a <GPIO_Init+0x262>
            } else {
                EXTI->RTSR2 |= (1 << (pinno - 32));
 80006b6:	4b33      	ldr	r3, [pc, #204]	@ (8000784 <GPIO_Init+0x29c>)
 80006b8:	6a1b      	ldr	r3, [r3, #32]
 80006ba:	7afa      	ldrb	r2, [r7, #11]
 80006bc:	3a20      	subs	r2, #32
 80006be:	2101      	movs	r1, #1
 80006c0:	fa01 f202 	lsl.w	r2, r1, r2
 80006c4:	4611      	mov	r1, r2
 80006c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000784 <GPIO_Init+0x29c>)
 80006c8:	430b      	orrs	r3, r1
 80006ca:	6213      	str	r3, [r2, #32]
                EXTI->FTSR2 &= ~(1 << (pinno - 32));
 80006cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <GPIO_Init+0x29c>)
 80006ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d0:	7afa      	ldrb	r2, [r7, #11]
 80006d2:	3a20      	subs	r2, #32
 80006d4:	2101      	movs	r1, #1
 80006d6:	fa01 f202 	lsl.w	r2, r1, r2
 80006da:	43d2      	mvns	r2, r2
 80006dc:	4611      	mov	r1, r2
 80006de:	4a29      	ldr	r2, [pc, #164]	@ (8000784 <GPIO_Init+0x29c>)
 80006e0:	400b      	ands	r3, r1
 80006e2:	6253      	str	r3, [r2, #36]	@ 0x24
 80006e4:	e031      	b.n	800074a <GPIO_Init+0x262>
            }
        }
        else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	795b      	ldrb	r3, [r3, #5]
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d12d      	bne.n	800074a <GPIO_Init+0x262>
        {
            if (pinno < 32) {
 80006ee:	7afb      	ldrb	r3, [r7, #11]
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	d814      	bhi.n	800071e <GPIO_Init+0x236>
                EXTI->RTSR1 |= (1 << pinno);
 80006f4:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <GPIO_Init+0x29c>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	7afa      	ldrb	r2, [r7, #11]
 80006fa:	2101      	movs	r1, #1
 80006fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000700:	4611      	mov	r1, r2
 8000702:	4a20      	ldr	r2, [pc, #128]	@ (8000784 <GPIO_Init+0x29c>)
 8000704:	430b      	orrs	r3, r1
 8000706:	6093      	str	r3, [r2, #8]
                EXTI->FTSR1 |= (1 << pinno);
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <GPIO_Init+0x29c>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	7afa      	ldrb	r2, [r7, #11]
 800070e:	2101      	movs	r1, #1
 8000710:	fa01 f202 	lsl.w	r2, r1, r2
 8000714:	4611      	mov	r1, r2
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <GPIO_Init+0x29c>)
 8000718:	430b      	orrs	r3, r1
 800071a:	60d3      	str	r3, [r2, #12]
 800071c:	e015      	b.n	800074a <GPIO_Init+0x262>
            } else {
                EXTI->RTSR2 |= (1 << (pinno - 32));
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <GPIO_Init+0x29c>)
 8000720:	6a1b      	ldr	r3, [r3, #32]
 8000722:	7afa      	ldrb	r2, [r7, #11]
 8000724:	3a20      	subs	r2, #32
 8000726:	2101      	movs	r1, #1
 8000728:	fa01 f202 	lsl.w	r2, r1, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a15      	ldr	r2, [pc, #84]	@ (8000784 <GPIO_Init+0x29c>)
 8000730:	430b      	orrs	r3, r1
 8000732:	6213      	str	r3, [r2, #32]
                EXTI->FTSR2 |= (1 << (pinno - 32));
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <GPIO_Init+0x29c>)
 8000736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000738:	7afa      	ldrb	r2, [r7, #11]
 800073a:	3a20      	subs	r2, #32
 800073c:	2101      	movs	r1, #1
 800073e:	fa01 f202 	lsl.w	r2, r1, r2
 8000742:	4611      	mov	r1, r2
 8000744:	4a0f      	ldr	r2, [pc, #60]	@ (8000784 <GPIO_Init+0x29c>)
 8000746:	430b      	orrs	r3, r1
 8000748:	6253      	str	r3, [r2, #36]	@ 0x24
            }
        }

        // Enable interrupt mask
        if (pinno < 32)
 800074a:	7afb      	ldrb	r3, [r7, #11]
 800074c:	2b1f      	cmp	r3, #31
 800074e:	d81b      	bhi.n	8000788 <GPIO_Init+0x2a0>
            EXTI->IMR1 |= (1 << pinno);
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <GPIO_Init+0x29c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	7afa      	ldrb	r2, [r7, #11]
 8000756:	2101      	movs	r1, #1
 8000758:	fa01 f202 	lsl.w	r2, r1, r2
 800075c:	4611      	mov	r1, r2
 800075e:	4a09      	ldr	r2, [pc, #36]	@ (8000784 <GPIO_Init+0x29c>)
 8000760:	430b      	orrs	r3, r1
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	e01b      	b.n	800079e <GPIO_Init+0x2b6>
 8000766:	bf00      	nop
 8000768:	48000400 	.word	0x48000400
 800076c:	48000800 	.word	0x48000800
 8000770:	48000c00 	.word	0x48000c00
 8000774:	48001000 	.word	0x48001000
 8000778:	48001400 	.word	0x48001400
 800077c:	40021000 	.word	0x40021000
 8000780:	40010000 	.word	0x40010000
 8000784:	40010400 	.word	0x40010400
        else
            EXTI->IMR2 |= (1 << (pinno - 32));
 8000788:	4b4d      	ldr	r3, [pc, #308]	@ (80008c0 <GPIO_Init+0x3d8>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	7afa      	ldrb	r2, [r7, #11]
 800078e:	3a20      	subs	r2, #32
 8000790:	2101      	movs	r1, #1
 8000792:	fa01 f202 	lsl.w	r2, r1, r2
 8000796:	4611      	mov	r1, r2
 8000798:	4a49      	ldr	r2, [pc, #292]	@ (80008c0 <GPIO_Init+0x3d8>)
 800079a:	430b      	orrs	r3, r1
 800079c:	6193      	str	r3, [r2, #24]
    }

    // 2. Configure the speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pinno));
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	799b      	ldrb	r3, [r3, #6]
 80007a2:	461a      	mov	r2, r3
 80007a4:	7afb      	ldrb	r3, [r7, #11]
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pinno));
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	7afb      	ldrb	r3, [r7, #11]
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	2103      	movs	r1, #3
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43db      	mvns	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	400a      	ands	r2, r1
 80007c8:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6899      	ldr	r1, [r3, #8]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	430a      	orrs	r2, r1
 80007d8:	609a      	str	r2, [r3, #8]

    // 3. Configure the pull-up/pull-down resistor
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pinno));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	79db      	ldrb	r3, [r3, #7]
 80007de:	461a      	mov	r2, r3
 80007e0:	7afb      	ldrb	r3, [r7, #11]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pinno));
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68da      	ldr	r2, [r3, #12]
 80007f0:	7afb      	ldrb	r3, [r7, #11]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	2103      	movs	r1, #3
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	43db      	mvns	r3, r3
 80007fc:	4619      	mov	r1, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	400a      	ands	r2, r1
 8000804:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68d9      	ldr	r1, [r3, #12]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	430a      	orrs	r2, r1
 8000814:	60da      	str	r2, [r3, #12]

    // 4. Configure the output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pinno);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7a1b      	ldrb	r3, [r3, #8]
 800081a:	461a      	mov	r2, r3
 800081c:	7afb      	ldrb	r3, [r7, #11]
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pinno);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	7afb      	ldrb	r3, [r7, #11]
 800082c:	2101      	movs	r1, #1
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	4619      	mov	r1, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	400a      	ands	r2, r1
 800083c:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	6859      	ldr	r1, [r3, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	430a      	orrs	r2, r1
 800084c:	605a      	str	r2, [r3, #4]

    // 5. Configure alternate function (if needed)
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	795b      	ldrb	r3, [r3, #5]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d131      	bne.n	80008ba <GPIO_Init+0x3d2>
    {
        uint8_t afr_index = pinno / 8;
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	08db      	lsrs	r3, r3, #3
 800085a:	727b      	strb	r3, [r7, #9]
        uint8_t afr_pos = (pinno % 8) * 4;
 800085c:	7afb      	ldrb	r3, [r7, #11]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	b2db      	uxtb	r3, r3
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	723b      	strb	r3, [r7, #8]

        pGPIOHandle->pGPIOx->AFR[afr_index] &= ~(0xF << afr_pos);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	7a7a      	ldrb	r2, [r7, #9]
 800086e:	3208      	adds	r2, #8
 8000870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000874:	7a3b      	ldrb	r3, [r7, #8]
 8000876:	220f      	movs	r2, #15
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	7a7a      	ldrb	r2, [r7, #9]
 8000886:	4001      	ands	r1, r0
 8000888:	3208      	adds	r2, #8
 800088a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[afr_index] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << afr_pos);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	7a7a      	ldrb	r2, [r7, #9]
 8000894:	3208      	adds	r2, #8
 8000896:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7a5b      	ldrb	r3, [r3, #9]
 800089e:	461a      	mov	r2, r3
 80008a0:	7a3b      	ldrb	r3, [r7, #8]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	7a7a      	ldrb	r2, [r7, #9]
 80008ae:	4301      	orrs	r1, r0
 80008b0:	3208      	adds	r2, #8
 80008b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80008b6:	e000      	b.n	80008ba <GPIO_Init+0x3d2>
    if (pinno > 15) return; // недопустимий пін
 80008b8:	bf00      	nop
    }
}
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40010400 	.word	0x40010400

080008c4 <GPIO_ReadFromInputPin>:

/*
 * Data Read and Write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
    return (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x01);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691a      	ldr	r2, [r3, #16]
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	fa22 f303 	lsr.w	r3, r2, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	b2db      	uxtb	r3, r3
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <SPI_PeriClockControl>:
 */

#include "stm32f3xx_spi_driver.h"


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d120      	bne.n	8000940 <SPI_PeriClockControl+0x54>
	    {
	        if (pSPIx == SPI1)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a22      	ldr	r2, [pc, #136]	@ (800098c <SPI_PeriClockControl+0xa0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d106      	bne.n	8000914 <SPI_PeriClockControl+0x28>
	        	SPI1_PCLK_EN();
 8000906:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <SPI_PeriClockControl+0xa4>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4a21      	ldr	r2, [pc, #132]	@ (8000990 <SPI_PeriClockControl+0xa4>)
 800090c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000910:	6193      	str	r3, [r2, #24]
	        else if (pSPIx == SPI2)
	        	SPI2_PCLK_DI();
	        else if (pSPIx == SPI3)
	        	SPI3_PCLK_DI();
	    }
}
 8000912:	e035      	b.n	8000980 <SPI_PeriClockControl+0x94>
	        else if (pSPIx == SPI2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a1f      	ldr	r2, [pc, #124]	@ (8000994 <SPI_PeriClockControl+0xa8>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d106      	bne.n	800092a <SPI_PeriClockControl+0x3e>
	        	SPI2_PCLK_EN();
 800091c:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <SPI_PeriClockControl+0xa4>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	4a1b      	ldr	r2, [pc, #108]	@ (8000990 <SPI_PeriClockControl+0xa4>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000926:	61d3      	str	r3, [r2, #28]
}
 8000928:	e02a      	b.n	8000980 <SPI_PeriClockControl+0x94>
	        else if (pSPIx == SPI3)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a1a      	ldr	r2, [pc, #104]	@ (8000998 <SPI_PeriClockControl+0xac>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d126      	bne.n	8000980 <SPI_PeriClockControl+0x94>
	        	SPI3_PCLK_EN();
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <SPI_PeriClockControl+0xa4>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a16      	ldr	r2, [pc, #88]	@ (8000990 <SPI_PeriClockControl+0xa4>)
 8000938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800093c:	61d3      	str	r3, [r2, #28]
}
 800093e:	e01f      	b.n	8000980 <SPI_PeriClockControl+0x94>
	        if (pSPIx == SPI1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a12      	ldr	r2, [pc, #72]	@ (800098c <SPI_PeriClockControl+0xa0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d106      	bne.n	8000956 <SPI_PeriClockControl+0x6a>
	        	SPI1_PCLK_DI();
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <SPI_PeriClockControl+0xa4>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a10      	ldr	r2, [pc, #64]	@ (8000990 <SPI_PeriClockControl+0xa4>)
 800094e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000952:	6193      	str	r3, [r2, #24]
}
 8000954:	e014      	b.n	8000980 <SPI_PeriClockControl+0x94>
	        else if (pSPIx == SPI2)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a0e      	ldr	r2, [pc, #56]	@ (8000994 <SPI_PeriClockControl+0xa8>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d106      	bne.n	800096c <SPI_PeriClockControl+0x80>
	        	SPI2_PCLK_DI();
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <SPI_PeriClockControl+0xa4>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a0b      	ldr	r2, [pc, #44]	@ (8000990 <SPI_PeriClockControl+0xa4>)
 8000964:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000968:	61d3      	str	r3, [r2, #28]
}
 800096a:	e009      	b.n	8000980 <SPI_PeriClockControl+0x94>
	        else if (pSPIx == SPI3)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <SPI_PeriClockControl+0xac>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d105      	bne.n	8000980 <SPI_PeriClockControl+0x94>
	        	SPI3_PCLK_DI();
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <SPI_PeriClockControl+0xa4>)
 8000976:	69db      	ldr	r3, [r3, #28]
 8000978:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <SPI_PeriClockControl+0xa4>)
 800097a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800097e:	61d3      	str	r3, [r2, #28]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40013000 	.word	0x40013000
 8000990:	40021000 	.word	0x40021000
 8000994:	40003800 	.word	0x40003800
 8000998:	40003c00 	.word	0x40003c00

0800099c <SPI_Init>:


void SPI_Init(SPI_Handle_t *pSPIHandle){
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2101      	movs	r1, #1
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff9e 	bl	80008ec <SPI_PeriClockControl>

	uint32_t temp = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
	//1 config the mode
	temp |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	4313      	orrs	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]

	//2 config the bus config
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	795b      	ldrb	r3, [r3, #5]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d104      	bne.n	80009d2 <SPI_Init+0x36>
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e014      	b.n	80009fc <SPI_Init+0x60>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	795b      	ldrb	r3, [r3, #5]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d104      	bne.n	80009e4 <SPI_Init+0x48>
		temp |= (1 << SPI_CR1_BIDIMODE);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	e00b      	b.n	80009fc <SPI_Init+0x60>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d107      	bne.n	80009fc <SPI_Init+0x60>
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009f2:	60fb      	str	r3, [r7, #12]
		temp |=  (1 << SPI_CR1_RXONLY);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009fa:	60fb      	str	r3, [r7, #12]
	}

	//3 config Data Frame Format
	temp |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_CRCL ;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	799b      	ldrb	r3, [r3, #6]
 8000a00:	02db      	lsls	r3, r3, #11
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]

	//4 config Clock Phase (CPHA)
	temp |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA ;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	79db      	ldrb	r3, [r3, #7]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]

	//5 config Clock Polarity (CPOL)
	temp |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL ;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7a1b      	ldrb	r3, [r3, #8]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]

	//6 config SPI Serial Clock Speed SPI_SclkSpeed
	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR ;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	7a9b      	ldrb	r3, [r3, #10]
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = temp;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <SPI_SendData>:
		 SPI2_REG_RESET();
	 else if (pSPIx == SPI3)
		 SPI3_REG_RESET();
}

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000a48:	e026      	b.n	8000a98 <SPI_SendData+0x5c>
		while(!(pSPIx->SR & (1 << 1)));
 8000a4a:	bf00      	nop
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f003 0302 	and.w	r3, r3, #2
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0f9      	beq.n	8000a4c <SPI_SendData+0x10>
		if(pSPIx->CR1 & (1 << SPI_CR1_CRCL)){
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00e      	beq.n	8000a82 <SPI_SendData+0x46>
			//16
			pSPIx->DR = *((uint16_t*)(pTxBuffer));
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	60da      	str	r2, [r3, #12]
			Len--;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3b01      	subs	r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
			Len--;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	e00a      	b.n	8000a98 <SPI_SendData+0x5c>
		}else{
			//8
			pSPIx->DR = *pTxBuffer;
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	60da      	str	r2, [r3, #12]
			Len--;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	3301      	adds	r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1d5      	bne.n	8000a4a <SPI_SendData+0xe>
		}
	}
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <SPI_PeripheralControl>:


void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d106      	bne.n	8000aca <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	601a      	str	r2, [r3, #0]
	}else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000ac8:	e005      	b.n	8000ad6 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	601a      	str	r2, [r3, #0]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <SPI_SSOEConfig>:
	}else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d106      	bne.n	8000b00 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f043 0204 	orr.w	r2, r3, #4
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	605a      	str	r2, [r3, #4]
	}else {
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000afe:	e005      	b.n	8000b0c <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f023 0204 	bic.w	r2, r3, #4
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	605a      	str	r2, [r3, #4]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
	...

08000b18 <__libc_init_array>:
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8000b50 <__libc_init_array+0x38>)
 8000b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8000b54 <__libc_init_array+0x3c>)
 8000b1e:	1b64      	subs	r4, r4, r5
 8000b20:	10a4      	asrs	r4, r4, #2
 8000b22:	2600      	movs	r6, #0
 8000b24:	42a6      	cmp	r6, r4
 8000b26:	d109      	bne.n	8000b3c <__libc_init_array+0x24>
 8000b28:	4d0b      	ldr	r5, [pc, #44]	@ (8000b58 <__libc_init_array+0x40>)
 8000b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8000b5c <__libc_init_array+0x44>)
 8000b2c:	f000 f818 	bl	8000b60 <_init>
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	10a4      	asrs	r4, r4, #2
 8000b34:	2600      	movs	r6, #0
 8000b36:	42a6      	cmp	r6, r4
 8000b38:	d105      	bne.n	8000b46 <__libc_init_array+0x2e>
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b40:	4798      	blx	r3
 8000b42:	3601      	adds	r6, #1
 8000b44:	e7ee      	b.n	8000b24 <__libc_init_array+0xc>
 8000b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b4a:	4798      	blx	r3
 8000b4c:	3601      	adds	r6, #1
 8000b4e:	e7f2      	b.n	8000b36 <__libc_init_array+0x1e>
 8000b50:	08000b8c 	.word	0x08000b8c
 8000b54:	08000b8c 	.word	0x08000b8c
 8000b58:	08000b8c 	.word	0x08000b8c
 8000b5c:	08000b90 	.word	0x08000b90

08000b60 <_init>:
 8000b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b62:	bf00      	nop
 8000b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b66:	bc08      	pop	{r3}
 8000b68:	469e      	mov	lr, r3
 8000b6a:	4770      	bx	lr

08000b6c <_fini>:
 8000b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6e:	bf00      	nop
 8000b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b72:	bc08      	pop	{r3}
 8000b74:	469e      	mov	lr, r3
 8000b76:	4770      	bx	lr
